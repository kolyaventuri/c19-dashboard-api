service: c19-dashboard-api
useDotenv: true

package:
  individually: true

provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  profile: "${env:AWS_PROFILE}"
  role: "arn:aws:iam::${env:AWS_ID}:role/${env:AWS_ROLE}-${self:provider.stage}"
  stage: ${opt:stage, 'dev'}
  logRetentionInDays: ${self:custom.logs.retention.${self:provider.stage}, 7}
  environment:
    ENV: ${self:provider.stage}
    REGION: ${self:provider.region}
    SERVICE_NAME: ${self:service}-${self:provider.stage}
    DYNAMO_URL: ${self:custom.dynamo.url.${self:provider.stage}, ""}
    DYNAMO_TABLE: ${self:custom.dynamo.table.cache}
    COVID_ACT_NOW_KEY: ${env:COVID_ACT_NOW_KEY}
    EFS_PATH: ${env:EFS_PATH}

custom:
  config:
    bucket: ${self:service}-${self:provider.stage}
  logs:
    retention:
      production: 14
      dev: 7
  webpack:
    webpackConfig: ./webpack.config.js
    packager: 'npm'
    includeModules:
      forceExclude:
        - dotenv 
  warmup:
    enabled: true
    events:
      - schedule: rate(5 minutes)
    prewarm: true
    concurrency: 1
  prune:
    automatic: true
    number: 5
  domain:
    enabled:
      production: true
      dev: false
      local: false
  customDomain:
    domainName: c19.api.blagl.xyz
    stage: production
    basePath: ''
    certificateName: 'blagl.xyz'
    createRoute53Record: true
    endpointType: 'regional'
    securityPolicy: tls_1_2
    enabled: ${self:custom.domain.enabled.${self:provider.stage}}
  dynamo:
    table:
      cache: c19-dashboard-cache_${self:provider.stage}
    url:
      local: http://localhost:8000
  dynamodb:
    stages:
      - local
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true

functions:
  healthcheck:
    handler: src/healthcheck/get.handler
    description: Basic page ok healthcheck
    events:
      - http:
          path: v1/healthcheck
          method: get
          cors: true
  stateTimeseries:
    handler: src/states/timeseries.handler
    description: State timeseries
    events:
      - http:
          path: v1/states/{type}/timeseries
          method: get
          cors: true
          request:
            parameters:
                paths:
                  type: true
  countyTimeseries:
    handler: src/counties/timeseries.handler
    description: County timeseries
    events:
      - http:
          path: v1/counties/{type}/timeseries
          method: get
          cors: true
          request:
            parameters:
                paths:
                  type: true

  countiesUpdater:
    handler: src/utils/update-counties.update
    description: Update the Counties data in S3
    events:
      - eventBridge:
          schedule: cron(0 14-18 * * ? *)
  fullUpdater:
    handler: src/utils/fetch-and-update.update
    description: Fetch fresh data and update in S3
    fileSystemConfig:
      localMountPath: ${env:EFS_PATH}
      arn: arn:aws:elasticfilesystem:${self:provider.region}:${env:AWS_ID}:access-point/${env:EFS_AP}
    vpc:
      securityGroupIds:
        - ${env:VPC_SEC_GROUP} 
      subnetIds:
        - ${env:VPC_SUBNET_ID}

resources:
  Resources:
    GeneratorTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamo.table.cache}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 3
    Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.config.bucket}
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault: 
                SSEAlgorithm: AES256
        VersioningConfiguration:
          Status: Enabled
        CorsConfiguration:
          CorsRules:
            - AllowedHeaders: ['*']
              AllowedMethods: [GET]
              AllowedOrigins: ['*']
              Id: CORSRuleId1
              MaxAge: '3600'
    
plugins:
  - serverless-webpack
  - serverless-plugin-warmup
  - serverless-dotenv-plugin
  - serverless-prune-plugin
  - serverless-domain-manager
  - serverless-offline
  - serverless-dynamodb-local
